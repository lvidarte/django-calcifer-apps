[uwsgi]

## Show all options at http://projects.unbit.it/uwsgi/wiki/Doc

## gid
##
## Set the gid under the uWSGI server will run.
gid = xleo

## uid
##
## Set the uid under the uWSGI server will run.
uid = xleo

## pidfile
##
## Write the pidfile to the specified file before privileges drop.
pidfile = /tmp/calcifer.pid

## socket
##
## Specify the path (in case of UNIX socket) or the address (for INET sockets)
## of the socket where the uwsgi clients (your webserver) will connect to. You
## can specify up to 8 socket options. When used as a command line arg you can
## use the '-s' shortcut.
socket = /tmp/calcifer.sock

## chmod-socket or chmod
##
## Unix sockets are filesystem object that must obey to unix permission scheme.
## You can set unix sockets permissions with this option if your webserver has
## no access to the uWSGI socket.
##
## When used as a flag this option will set permissions to 666, otherwise the
## spcified scheme will be used.
chmod = 666

## logto
##
## Run the processes in background using a logfile or a udp server.
logto = /var/log/uwsgi/app/calcifer.log

## vacuum
##
## Automatically remove unix socket and pidfiles on server exit.
vacuum = true

## master
##
## Enable the master process.
master = true

## processes or workers
##
## Set the number of workers for preforking mode. This is the base for easy
## and safe concurrency in your app. More workers you add, more concurrent
## requests you can manage. Each worker correspond to a system process, so it
## consumes memory, choose carefully the right number. You can easily drop
## down your system if you set a too high value.
##
## When used as a command line arg you can shortcut it with -p
processes = 4

## max-requests
##
## Set the maximum number of requests for each worker. When a worker reaches
## this number it will get recycled. You can use this option to dumb fight
## memory leaks (even if reload-on-as and reload-on-rss are more useful for
## this kind of problem).
max-requests = 5000

## enable-threads (required by newrelic)
##
## By default uWSGI does not enable threading support within the
## Python interpreter core. This means it is not possible to create background
## threads from Python code. As the Python agent relies on being able to
## create background threads, this option is required.
enable-threads = true

## single-interpreter (required by newrelic)
##
## By default uWSGI will execute Python code within a sub interpreter
## of the process rather than the main Python interpreter created when Python
## is first initialised. This is done to allow multiple separate Python web
## applications to be run within the one process but to be sufficiently separated
## so as to not interfere with each other.
single-interpreter = true

## harakiri
##
## This will set the harakiri timeout (look at the wiki home page for a better
## understanding). Every request that will take longer than the seconds
## specified in the harakiri timeout will be dropped and the corresponding
## worker recycled.
harakiri = 60

## home or virtualenv or venv or pyhome [python plugin required]
##
## Set the specified virtualenv for python apps.
home = /home/xleo/src/lvidarte/django-calcifer-apps/env

## dir
##
## Move to a specific directory
chdir = /home/xleo/src/lvidarte/django-calcifer-apps

## wsgi file
##
## Load the specified python WSGI file
wsgi-file = wsgi.py

## env
##
## Set an environment variable.
env = DJANGO_SETTINGS_MODULE=settings

### WSGI plugin for uWSGI
plugins = python
